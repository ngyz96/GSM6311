#preprocessing
basedcalled with ?guppy on MINIKNOW
## porechop -> adaptor removal
porechop -i barcode07_combined.fastq.gz -b ../results/porechop/barcode7/ 2> output.txt
## seqkit -> trimming (1350-1900 bp taken from https://bmcmicrobiol.biomedcentral.com/articles/10.1186/s12866-021-02094-5)
seqkit seq BC07.fastq.gz -M 1900 -m 1350 -j 20 -o BC07_trimmed.fastq.gz

# creation of db - based on https://labs.epi2me.io/how-to-meta-offline/
## 1. Download the targeted loci projects and concatenate the files:
wget https://ftp.ncbi.nlm.nih.gov/refseq/TargetedLoci/Archaea/archaea.16SrRNA.fna.gz  # Archaea 16S
wget https://ftp.ncbi.nlm.nih.gov/refseq/TargetedLoci/Bacteria/bacteria.16SrRNA.fna.gz  # Bacteria 16S
wget https://ftp.ncbi.nlm.nih.gov/refseq/TargetedLoci/Fungi/fungi.18SrRNA.fna.gz  # Fungi 18S
cat *rRNA.fna.gz > ncbi16s18srRNA.bacteria_archaea_fungi.fna.gz 

## 2. Create an MMI index for the minimap2 pipeline (optional)
minimap2 -x map-ont -d ncbi16s18srRNA.bacteria_archaea_fungi.mmi ncbi16s18srRNA.bacteria_archaea_fungi.fna

## 3. Download and prepare the ref2taxid TSV file
wget https://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/nucl_gb.accession2taxid.gz
### As this file may contain unneeded entries, we extract only those of the sequences included in the FASTA file.
grep -oP '^>[^\s]+' ncbi16s18srRNA.bacteria_archaea_fungi.fna | sed 's/^>//' > accessions.txt
### filter the records using grep
zcat nucl_gb.accession2taxid.gz | grep -w -f accessions.txt > hit.acc2taxid.tsv
### pick the relevant columns ('accession.version' and 'taxid')
cut -f2,3 hit.acc2taxid.tsv > ref2taxid.targloci.tsv

## 3. prepare header of the FASTA file to contain TaxIDs: kraken:taxid|XXX
cut -d$'\t' -f1,2 ref2taxid.targloci.tsv --output-delimiter='|kraken:taxid|' > new_name.txt
cut -f1 ref2taxid.targloci.tsv | paste - new_name.txt > alias.txt
seqkit replace \
    -p '^(\S+)(.+?)$' \
    -r '{kv}' ncbi16s18srRNA.bacteria_archaea_fungi.fna \
    -k alias.txt ncbi16s18srRNA.bacteria_archaea_fungi.fna \
    > ncbi16s18srRNA.bacteria_archaea_fungi.rename.fna

## 4. build the database using the option `add-to-library` to use your sequences
kraken2-build \
    --add-to-library ncbi16s18srRNA.bacteria_archaea_fungi.rename.fna \
    --db kraken2_database/

## 5. get taxonomy file
wget https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.tar.gz
mkdir NCBI_taxdump
tar -xf new_taxdump.tar.gz -C NCBI_taxdump
mv NCBI_taxdump/ kraken2_database/taxonomy

## 6. build the database
kraken2-build --build --db kraken2_database

## 7. build bracken 1000 kmer database
bracken-build -d kraken2_database/ -l 1000
generate_kmer_distribution.py \
    -i kraken2_database/database1000mers.kraken \
    -o database1000mers.kmer_distrib

# kraken alignment
kraken2 --db ../../databases/kraken2_database/ --threads 8 --report ../kraken2/BC07.kreport --output ../kraken2/BC07.kraken BC07_trimmed.fastq.gz
bracken -d ../../databases/kraken2_database/ -i BC07.kreport -o BC07.bracken -w BC07.breport -r 1000

# minimap2 for all alignments (primary + secondary) 
minimap2 -ax map-ont -t 8 ../../databases/ncbi16s18srRNA.bacteria_archaea_fungi.mmi BC07_trimmed.fastq.gz > ../minimap/BC07.sam
# samtools view -o BC07.bam BC07.sam
samtools sort -o BC07.sorted.bam BC07.bam
samtools index BC07.sorted.bam
## one liner? minimap2 -ax map-ont -t 8 - N 0 ../../databases/ncbi16s18srRNA.bacteria_archaea_fungi.mmi BC07_trimmed.fastq.gz | samtools sort -o out.bam --write-index - 
seqkit bam -C BC07.sorted.bam 2> BC07_alignment.tsv	

# get only primary alignment
samtools view -F 0x900 -o BC07_primary.sorted.bam BC07.sorted.bam
samtools index BC07_primary.sorted.bam
seqkit bam -C BC07_primary.sorted.bam 2> BC07_prialignment.tsv
cut -f2 BC07_prialignment.tsv | awk '{s+=$1} END {print s}'
cut -f2 BC07_alignment.tsv | awk '{s+=$1} END {print s}'
samtools flagstat BC07.sorted.bam

R magic to combine and get alignment
Refer to plot.R